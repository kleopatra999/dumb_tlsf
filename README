

Dumb TLSF

An extremely dumb memory allocator in the Two-Level Segregate Fit category.
This allocator keeps separate free lists for each size that it allocates.
Unlike most TLSF allocators, it makes absolutely no effort to combine adjacent free blocks.

Currently requires g++ and C++11.

Performance characteristics:

Tiny code size (< 10k compiled)
Blazingly fast realtime alloc and free (provided you don't go over the reserved memory size)
Alloc and free are even faster when sizes are known at compile-time.
Excellent best-case fragmentation (0% overhead!)
Terrible worst-case fragmentation (almost unbounded)
Average-case fragmentation depends on how you use it.
No memory is returned to the OS for other programs to use.

Usage:

 // Just dump this directly in your source tree.
#include "dumb_tlsf/dumb_tlsf.cpp"

 // All public functions are in the namespace dumb_tlsf.
using namespace dumb_tlsf;

template <class T>
T* dalloc ();
 // Allocate an object of type T.
template <class T>
void dfree (T*);
 // Free a previously allocated object of type T.
 // No error checking--freeing an object not allocated with dalloc() invites chaos.

template <class T, class... Args>
T* dnew (Args... args);
 // Allocate an object of type T and call a constructor with arbitrary arguments.
template <class T>
void ddelete (T*);
 // Call the object's destructor and deallocate it.  Don't use this on polymorphic
 // pointers whose target may be larger than the pointer's official superclass.
template <class T>
void ddelete (T*, size_t);
 // Call the object's destructor and deallocate it, with the given size.

void* dalloc (size_t);
 // Allocate the given number of bytes.
void dfree (void*, size_t);
 // Free the given number of bytes.  Yes, you can use this to cut the end off of an
 // allocated object, provided you later free the object under its new smaller size.

void dreserve (size_t size);
 // Reserve the given amount of memory ahead of time.  This only works before anything
 // has been allocated or immediately after the dapocalypse; otherwise it is a no-op.
 // Using this is not necessary, but is recommended if you want consistent realtime
 // performance.
void dset_alloc_size (size_t size);
 // From now on, whenever we run out of reserved memory, this much more memory will be
 // reserved.  The default alloc_size is one megabyte.  Try using dreserve instead.

size_t dused_memory ();
 // Get the total amount of memory used by Dumb TLSF.  Includes fragmentation overhead
 // caused by freed-and-not-allocated chunks.  Does not include memory that has been
 // reserved but never allocated.  Before you release a major program version, examine
 // this after your program has been running for a while, and dreserve a bit more than
 // it.  This number only goes up, and never comes down.
size_t dreserved_memory ();
 // Get the total amount of memory reserved by Dumb TLSF.

void dapocalypse ();
 // Free all memory used by Dumb TLSF and start civilization anew.  Won't call destructors.


Multiple instances:

The file dumb_tlsf.cpp does not have an include guard, so you can include separate copies
in multiple namespaces.  Then you can selectively dreserve and dapocalypse them to get
fast memory pools.


Interface hole:

Since the size of an object must be given when it is freed, this cannot in most cases be used
as a drop-in replacement for malloc and free, or even new and delete.  You also cannot
allocate arrays with this (though it's trivial to write an Array(Type, length) wrapper class).


Usage recommendations:

Once you allocate a block of a certain size, that chunk of memory will always stay the
same size.  So, if your allocation sizes stay predictably similar over time, you will enjoy
efficient memory usage.  If your allocations vary wildly in size, you may start to see problems.

In particular, if you allocate a number of objects of a certain size, then free them, and
never allocate anything of that size again, you will incur a memory leak equal in size to the
entire set of objects you allocated.  But if you allocate the same number of those objects
again, you will not use any additional memory.

So, this library is probably good for something like a video game, where realtime performance
is crucial, but the amount and kinds of allocations stay more or less the same over time, and
not so good for things like traditional string manipulation, where elements of many different
sizes are allocated.  But if your strings are reference-counted ropes with fixed-size chunks,
they would probably do very well with this allocator.

If all the objects you allocate are exactly the same size, there is no better allocator than
this one.

Allocations larger than 7k fall through to malloc() and thus are not very realtime.  However,
allocations that large probably mean you shouldn't be using Dumb TLSF in the first place.
